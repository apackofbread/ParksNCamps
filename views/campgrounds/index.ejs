<% layout('/layouts/boilerplate') %>
    <h1>All campgrounds</h1>

    <div style="height: 400px;width: 100%;" id="map"></div>

    <% for(let campground of campgrounds){ %>
        <div class="card mb-3" >
            <div class="row">
                <div class="col-md-4">
                    <img crossorigin="anonymous" src="<%= campground.images[0].url %>" class="card-img-top" alt="...">
                </div>
                <div class="card-body col-md-8">
                    <h5 class="card-title">
                        <%= campground.title %>
                    </h5>
                    <p class="card-text">
                        <%= campground.description %>
                    </p>
                    <p class="card-text"> <small class="text-muted">
                            <%= campground.location %>
                        </small></p>
                    <a href="/campgrounds/<%= campground._id %>" class="btn btn-primary">View</a>
                </div>
            </div>

        </div>
        <% } %>

            <script>
                mapboxgl.accessToken = '<%- process.env.MAPBOX_TOKEN %>';
                const map = new mapboxgl.Map({
                    container: 'map',
                    // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
                    style: 'mapbox://styles/mapbox/light-v11',
                    center: [-103.5917, 40.6699],
                    zoom: 3
                });

                map.on('load', () => {
                    // Add a new source from our GeoJSON data and
                    // set the 'cluster' option to true. GL-JS will
                    // add the point_count property to your source data.
                    map.addSource('campgrounds', {
                        type: 'geojson',
                        // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
                        // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
                        data: {features :<%-JSON.stringify(campgrounds) %>},
                        cluster: true,
                        clusterMaxZoom: 14, // Max zoom to cluster points on
                        clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
                    });

                    map.addLayer({
                        id: 'clusters',
                        type: 'circle',
                        source: 'campgrounds',
                        filter: ['has', 'point_count'],
                        paint: {
                            // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)
                            // with three steps to implement three types of circles:
                            //   * Blue, 20px circles when point count is less than 100
                            //   * Yellow, 30px circles when point count is between 100 and 750
                            //   * Pink, 40px circles when point count is greater than or equal to 750
                            'circle-color': [
                                'step',
                                ['get', 'point_count'],
                                '#6366F1',
                                10,
                                '#8B5CF6',
                                30,
                                '#A855F7'
                            ],
                            'circle-radius': [
                                'step',
                                ['get', 'point_count'],
                                10,
                                10,
                                20,
                                30,
                                30
                            ]
                        }
                    });

                    map.addLayer({
                        id: 'cluster-count',
                        type: 'symbol',
                        source: 'campgrounds',
                        filter: ['has', 'point_count'],
                        layout: {
                            'text-field': ['get', 'point_count_abbreviated'],
                            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
                            'text-size': 12
                        }
                    });

                    map.addLayer({
                        id: 'unclustered-point',
                        type: 'circle',
                        source: 'campgrounds',
                        filter: ['!', ['has', 'point_count']],
                        paint: {
                            'circle-color': '#3B82F6',
                            'circle-radius': 6,
                            'circle-stroke-width': 1,
                            'circle-stroke-color': '#3B82F6'
                        }
                    });

                    // inspect a cluster on click
                    map.on('click', 'clusters', (e) => {
                        const features = map.queryRenderedFeatures(e.point, {
                            layers: ['clusters']
                        });
                        const clusterId = features[0].properties.cluster_id;
                        map.getSource('campgrounds').getClusterExpansionZoom(
                            clusterId,
                            (err, zoom) => {
                                if (err) return;

                                map.easeTo({
                                    center: features[0].geometry.coordinates,
                                    zoom: zoom
                                });
                            }
                        );
                    });

                    // When a click event occurs on a feature in
                    // the unclustered-point layer, open a popup at
                    // the location of the feature, with
                    // description HTML from its properties.
                    map.on('click', 'unclustered-point', (e) => {
                        const coordinates = e.features[0].geometry.coordinates.slice();
                        const text = e.features[0].properties.popUpMarkup;
                        // Ensure that if the map is zoomed out such that
                        // multiple copies of the feature are visible, the
                        // popup appears over the copy being pointed to.
                        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                        }

                        new mapboxgl.Popup()
                            .setLngLat(coordinates)
                            .setHTML(
                                text
                            )
                            .addTo(map);
                    });

                    map.on('mouseenter', 'clusters', () => {
                        map.getCanvas().style.cursor = 'pointer';
                    });
                    map.on('mouseleave', 'clusters', () => {
                        map.getCanvas().style.cursor = '';
                    });
                });
            </script>


            <h3><a href="/campgrounds/new">New Campground</a></h3>